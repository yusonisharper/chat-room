<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Chatroom - {{ roomName }}</title>
    <link rel="stylesheet" href="/css/style.css">
</head>

<body>
    <button onclick="goBack()" class="back-button"></button>
    <button onclick="deleteRoom('{{roomID}}')" class="delete-button"></button>

    <div class="msg-header">
        <h2>{{ roomName }}</h2>
        <div class="welcome"> <p>#{{ roomID }}</p> </div>
    </div>

    <div id="msgList" class="msg-list"></div>
    <div class="msg-bottom">
        <div class="input-group">
            <input type="text" id="msg" class="form-control" placeholder="Enter message...">
            <input onclick="newMsg()" class="submit-button">
        </div>
    </div>

<script>
    var nickName = prompt("Please enter your name", "nickName");

    var msgList = [];
    const msgContainer = document.getElementById('msgList');

    async function fetchData() {
        try {
            const response = await fetch(`http://localhost:8080/{{roomID}}/messages`);
            const data = await response.json();
            msgList = data;
            console.log(data);
        } catch (error) {
            console.error('Error fetching data:', error);
        }
        displayMessages();
    }

    function displayMessages() {
        msgContainer.innerHTML = '';
        msgList.forEach(msg => {
            const msgWrapper = document.createElement('div');
            msgWrapper.classList.add('msg-wrapper');

            const msgMeta = document.createElement('div');
            msgMeta.classList.add('msg-meta');

            const msgUser = document.createElement('span');
            msgUser.classList.add('msg-user');
            msgUser.textContent = msg.name;

            const msgDate = document.createElement('span');
            msgDate.classList.add('msg-date');
            const date = new Date(msg.created_date);
            const options = { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit', second: '2-digit', hour12: true };
            msgDate.textContent = date.toLocaleDateString('en-US', options);

            msgMeta.appendChild(msgUser);
            msgMeta.appendChild(msgDate);

            const msgBubble = document.createElement('div');
            msgBubble.classList.add('msg-bubble');
            msgBubble.textContent = msg.body;

            msgWrapper.appendChild(msgMeta);
            msgWrapper.appendChild(msgBubble);

            msgContainer.appendChild(msgWrapper);
        });
    }

    setInterval(fetchData, 3000);
    fetchData();

    async function newMsg() {
        const msgInput = document.getElementById('msg');
        const message = msgInput.value;
        try {
            let date = new Date();
            const response = await fetch(`http://localhost:8080/{{roomID}}/messages`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ message, nickName, date }),
            });
            msgInput.value = '';
            fetchData(); // Refresh the msgList after sending new msg
        } catch (error) {
            console.error('Error sending message:', error);
        }
    }

    async function deleteRoom(roomID) {
        try {
            const response = await fetch(`http://localhost:8080/${roomID}-delete`, {
                method: 'POST',
            });
            const result = await response.json();
            console.log(result);
            alert('Chatroom Deleted');
            window.location.href = 'http://localhost:8080/';
        } catch (error) {
            console.error('Error deleting room:', error);
        }
    }

    function goBack() {
        window.location.href = 'http://localhost:8080/';
    }
</script>
</body>