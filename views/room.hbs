<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Chatroom - {{ roomName }}</title>
    <link rel="stylesheet" href="/css/style.css">
</head>

<body>
    <button onclick="goBack()" class="back-button"></button>
    <button onclick="deleteRoom('{{roomID}}')" class="delete-button"></button>

    <div class="msg-header">
        <h2>{{ roomName }}</h2>
        <div class="welcome">
            <p>#{{ roomID }}</p>
        </div>
    </div>

    <div class="search-message">
        <div class="input-group">
            <input type="text" id="search" name="search" class="form-control" placeholder="Search...">
            <input onclick="searchMsg()" class="search-button">
        </div>
    </div>

    <div id="msgList" class="msg-list"></div>
    <div class="msg-bottom">
        <div class="input-group">
            <input type="text" id="msg" class="form-control" placeholder="Enter message...">
            <input onclick="newMsg()" class="submit-button">
        </div>
    </div>

<script>
    var nickName = localStorage.getItem('username');
    var msgList = [];
    var searchText = '';
    const msgContainer = document.getElementById('msgList');
    const userUrl = localStorage.getItem('userUrl');

    async function fetchData() {
        try {
            const response = await fetch(`http://localhost:8080/{{roomID}}/messages`);
            const data = await response.json();
            msgList = data;
            console.log(data);
        } catch (error) {
            console.error('Error fetching data:', error);
        }
        displayMessages();
    }

    function displayMessages() {
        msgContainer.innerHTML = '';
        msgList.forEach(msg => {
            if (searchText === '' || msg.body.includes(searchText)) {
                const msgWrapper = document.createElement('div');
                msgWrapper.classList.add('msg-wrapper');

                const msgMeta = document.createElement('div');
                msgMeta.classList.add('msg-meta');

                const msgUser = document.createElement('span');
                msgUser.classList.add('msg-user');
                msgUser.textContent = msg.name;

                const msgDate = document.createElement('span');
                msgDate.classList.add('msg-date');
                const date = new Date(msg.created_date);
                const options = { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit', second: '2-digit', hour12: true };
                msgDate.textContent = date.toLocaleDateString('en-US', options);

                msgMeta.appendChild(msgUser);
                msgMeta.appendChild(msgDate);

                const msgBubble = document.createElement('div');
                msgBubble.classList.add('msg-bubble');
                msgBubble.textContent = msg.body;

                const deleteButton = document.createElement('button');
                deleteButton.textContent = 'DELETE';
                deleteButton.onclick = function () { deleteMsg('{{roomID}}', msg._id) };
                deleteButton.style = "color: #fff; background-color:#e91515ab; width: 70px; height: 20px;border-radius: 10px;border: none;cursor: pointer";

                const editButton = document.createElement('button');
                editButton.textContent = 'EDIT';
                editButton.style = "color: #fff; background-color:#007bff9e; width: 70px; height: 20px;border-radius: 10px;border: none;cursor: pointer; margin-bottom: 5px; margin-top: 5px;";
                editButton.onclick = function () {
                    let newText = prompt("Please enter new text", msg.body);
                    if (newText) {
                        updateMsg('{{roomID}}', msg._id, newText);
                    }
                };

                msgWrapper.appendChild(msgMeta);
                msgWrapper.appendChild(msgBubble);

                if (nickName === msg.name) {
                    msgWrapper.appendChild(editButton);
                    msgWrapper.appendChild(deleteButton);
                }

                msgContainer.appendChild(msgWrapper);
            }
        });
    }

    setInterval(fetchData, 3000);
    fetchData();

    async function newMsg() {
        const msgInput = document.getElementById('msg');
        const message = msgInput.value;
        try {
            let date = new Date();
            const response = await fetch(`http://localhost:8080/{{roomID}}/messages`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ message, nickName, date }),
            });
            msgInput.value = '';
            fetchData();
        } catch (error) {
            console.error('Error sending message:', error);
        }
    }

    async function deleteRoom(roomID) {
        try {
            const response = await fetch(`http://localhost:8080/${roomID}-delete`, {
                method: 'POST',
            });
            const result = await response.json();
            console.log(result);
            alert('Chatroom Deleted');
            window.location.href = userUrl;
        } catch (error) {
            console.error('Error deleting room:', error);
        }
    }

    function goBack() {
        window.location.href = userUrl;
    }

    async function deleteMsg(roomID, msgID) {
        try {
            const response = await fetch(`http://localhost:8080/${roomID}/messages-delete`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ msgID: msgID }),
            });
            const result = await response.json();
            console.log(result);
            fetchData();
        } catch (error) {
            console.error('Error deleting message:', error);
        }
    }

    async function searchMsg() {
        const searchInput = document.getElementById('search');
        const text = searchInput.value;
        searchText = (text === undefined) ? '' : text;
        console.log(searchText);
        fetchData();
    }

    async function updateMsg(roomID, msgID, text) {
        try {
            const response = await fetch(`http://localhost:8080/${roomID}/messages-update`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ msgID: msgID, text: text }),
            });
            const result = await response.json();
            console.log(result);
            fetchData();
        } catch (error) {
            console.error('Error updating message:', error);
        }
    }
</script>
</body>